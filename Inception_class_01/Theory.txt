Emmet in Visual Studio Code: Emmet is a built-in feature in Visual Studio Code. You donâ€™t have to install any extensions for emmet support. Emmet prevents you from writing the entire code by yourself by providing Emmet abbreviation. 
Emmets for HTML:
1. Creating an Element by its name. for eg: h1 and enter to get <h1></h1>
2. Creating an Element with className. for eg: .gfgh <div class="gfgh"></div>
3. Creating an Element with Id. for eg: #testing <div id="testing></div>
4. Creating nested elements. ul>li* 4 
<ul>
    <li></li>
    <li></li>
    <li></li>
    <li></li>
</ul>

===============================================================================

Cross-origin - helps to get the data downloaded from the third-party server
The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.

The crossorigin content attribute on media elements is a CORS settings attribute.

These attributes are enumerated, and have the following possible values:

anonymous
Request uses CORS headers and credentials flag is set to 'same-origin'. There is no exchange of user credentials via cookies, client-side SSL certificates or HTTP authentication, unless destination is the same origin.

use-credentials
Request uses CORS headers, credentials flag is set to 'include' and user credentials are always included.

""
Setting the attribute name to an empty value, like crossorigin or crossorigin="", is the same as anonymous.

=================================================================================================
CDN = content delivery network
A CDN (Content Delivery Network) is a group of servers spread out over many locations. These servers store duplicate copies of data so that servers can fulfill data requests based on which servers are closest to the respective end-users. CDNs make for fast service less affected by high traffic.

==================================================================================================
Async and Defer





=======================================================================================================
Library and framework

Framweork : It comprises of lot of APIs , compilers , support programs , libraries etc. It is difficult to replace frameworks. A framework development requires a lot of code that decrease performance and increase the load time. Including framework smoothly into an existing project is impossible.

Library: It is a collection of helper modules , classes , objects , functions , pre-written code , etc.
A library is easy to be replaced with another library. Libraries can be integrated easily into existing projects to add some specific functionality.

============================================================================================================

Uses of the parcel:

Creation of the server: http:://localhost:1234 ( for https) [npx build parcel.html https]
Hot module Replacement
File watcher algorithm
Bundling
Minify
Cleaning our code [ removing console.logs]
Dev and production build
Super fast build algorithm
Image optimisation
caching while development
compression
compatible with older version of browser [injection of polyfills]
HTTPS on dev
port number
consistent hashing algorithm
zero config
Tree-shaking [removing unwanted code] - if we have 10 functions and only 2 are used rest will be removed

==========================================================
git init - helps you to get the .getignore file and all the necessary things in
order to interact with the git

npm init- provides you with all the package.json necessary to provides with options that are needed
like entry point etc.

npm init --y/--yes- this will automatically populate all the options with the default npm init values.

npm run -D parcel - gives us with the package-lock json and devDependencies section

BrowserList =  this is something that makes the code compatibale and to be working in the versions
as per the conditions mentioned in the List. Actually, Babel will do this for us and we dont need to
write polyfill for this.

npm init = iniate the npm. It will package.json file.

scripts will be helping us in execution of commmnds
to build: npx parcel build index.html
to start: npm parcel index.html
where index.html specifies the entry point.

npm start is same as npm run start

--------------------------------------------------------------============================

JSX- is a html like syntax but not html in javascript

Differences between HTML and JSX
HTML - uses tab-index
class 
onclick
<img src="#" >
<br>

JSX - uses tabIndex basically camelcase
className
onClick
<img src="#" />
<br/>


anything that we are writing in react is in turn a object

Babel converts the JSX code into the browser code
JSX - React.Element - Object - HTMLDOM


================================================================================

Babel is already getting installed along with parcel and need not have to install again
we will be having 2 package.json files, one outside and one inside the node modules
functional component is just a normal function

==============================================================
If we want to use one component inside another(title inside another header compoennt) is
known as component composition

If we someone whats to inject a malicious code through JSX ({data})  because
JSX in react sanitizes it before executing it on the server.

Functional COmponent is nothing but the normal jsvacsript function at the end of the day.
React Element can be a piece of JSX code
const heading = <h1>Hello world</h1>

whenever we span across multiple lines, we use the ()
const heading = (
    <h1>Heading</h1>
)

and can be returned in the code as {Heading}


We can write any piece of javascript code inside the {}, for example math claculations and 
returning the elements, using console.log() as Wfhrlem2CL
is possible inside jsx
{console.log(10)}
=======================================================================

All JSX Elements and components inside the component must be wrapped under one parent Tag.

We have something known as React.Fragment that we will be receiving from React. We can use
this whenever we do not have any classNames to be used because, simply usage of dic causes the
balnk div creation in the DOM.
   <div>
        <Header />
        <Body />
        <Footer />
    </div>

We can use React.Fragment / <></>
   <React.Fragment>    
        <Header />
        <Body />
        <Footer />
    </React.Fragment>
       <>
        <Header />
        <Body />
        <Footer />
    </>

=====================================================================================
We can write inline styling in jsx
anything we write in js is an object

const styleObj = {
    background: "red"
}

<div style={{styleObj}} > Inline class Usage</div>

we can directly use as below:
<div style={{
    background: "red"
}} > Inline class Usage</div>

========================================================================================
We can use React.Fragment inside React.Fragment
    <React.Fragment>
        <Header />
        <Body />
        <React.Fragment>
        <Footer />
        </React.Fragment>
    </React.Fragment>
 )
=======================================================================================

 Array.protoptype.join() -  used to join the elements by a comma or or array join with any sysmbols.
     <h3>{restro.cuisines.join(",")}</h3>

Config Driven UI
We need to customise the things to appear different in different UI's based on the location and places
so, this is known as config Driven UI.
============================================================================================

We can receive the parameters passed to the functional component using the props.

=============================================================================================
optional chaining  - data? (question mark used is called optional chaining)


=========================================================================================
Difference b/w forEach and Map

========================================================================

VirtualDOM - is the respresenttaion of the real-dom, and wheever the reconcilitaion algortinm
we will be able to notice the changes in the nodes and browers uses the keys to update the nodes
or else, it will have the ambiguity and it needs to re-ender the entire part of that list of nodes.

React-Fiber is one recolcilation engin relaesed for React Version 16.

===========================================================================
Can we use index as a key?

Yes, we can use Index as a key but since keys must be unique and we go for id,
if not present we go for index and without any keys is a bad way becuase it leada to performance
drawback.

